--DISTINCT KULLANIMI

CREATE TABLE musteri_urun 
(
urun_id int, 
musteri_isim varchar(50),
urun_isim varchar(50) 
);
INSERT INTO musteri_urun VALUES (10, 'Ali', 'Portakal'); 
INSERT INTO musteri_urun VALUES (10, 'Ali', 'Portakal'); 
INSERT INTO musteri_urun VALUES (20, 'Veli', 'Elma'); 
INSERT INTO musteri_urun VALUES (30, 'Ayse', 'Armut'); 
INSERT INTO musteri_urun VALUES (20, 'Ali', 'Elma'); 
INSERT INTO musteri_urun VALUES (10, 'Adem', 'Portakal'); 
INSERT INTO musteri_urun VALUES (40, 'Veli', 'Kaysi'); 
INSERT INTO musteri_urun VALUES (20, 'Elif', 'Elma');

SELECT* FROM musteri_urun;

-- Musteri urun tablosundan urun isimlerini tekrarsız(grup) listeleyiniz

--group by
select urun_isim from musteri_urun group by urun_isim
--distinc cozumu
select distinct(urun_isim) from musteri_urun;
-- Tabloda kac farkli meyve vardir ?
select urun_isim,count( urun_isim) from musteri_urun
group by urun_isim--GRUP BY DA KAC ADET OLDUGU YAZAR


select urun_isim,count(DISTINCT urun_isim) from musteri_urun
group by urun_isim  --SADECE CESITDEN TEKRARSIZ OLARAK

-- FETCH NEXT (SAYI) ROW ONLY- OFFSET
-- Musteri urun tablosundan ilk 3 kaydi listeleyiniz.

select * from musteri_urun 
order by urun_id --kuckten buyuge siraladi
FETCH NEXT 3 ROW ONLY
--LIMIT ILE
SELECT * FROM musteri_urun 
ORDER BY urun_id 
LIMIT 3

-- Musteri urun tablosundan ilk kaydi listeleyiniz.
select * from musteri_urun order by urun_id limit 1

--Musteri urun tablosundan son 3 kaydi
select * from musteri_urun 
order by urun_id desc --buyukten kucuge
limit 3


CREATE TABLE maas 
(
id int, 
musteri_isim varchar(50),
maas int 
);
INSERT INTO maas VALUES (10, 'Ali', 5000); 
INSERT INTO maas VALUES (10, 'Ali', 7500); 
INSERT INTO maas VALUES (20, 'Veli', 10000); 
INSERT INTO maas VALUES (30, 'Ayse', 9000); 
INSERT INTO maas VALUES (20, 'Ali', 6500); 
INSERT INTO maas VALUES (10, 'Adem', 8000); 
INSERT INTO maas VALUES (40, 'Veli', 8500); 
INSERT INTO maas VALUES (20, 'Elif', 5500);

SELECT * FROM maas 
ORDER BY maas DESC
limit 1 --en yuksek maas gelir

--eger ikinci en yuksek maasi istersem 
SELECT * FROM maas 
ORDER BY maas DESC
OFFSET 1 --1.yi atla
LIMIT(1);

SELECT * FROM maas 
ORDER BY maas DESC
OFFSET 1
fetch next 1 row only

--maas tablosundna en dusuk 4.maas
SELECT * FROM maas 
ORDER BY maas 
OFFSET 3
limit 1;

--DDL ALTER TABLE STATEMENT
DROP TABLE PERSONEL
CREATE TABLE personel  (
id int,
isim varchar(50),  sehir varchar(50),  maas int,  
sirket varchar(20),
CONSTRAINT personel_pk PRIMARY KEY (id)
);
INSERT INTO personel VALUES(123456789, 'Ali Yilmaz', 'Istanbul', 5500, 'Honda');  
INSERT INTO personel VALUES(234567890, 'Veli Sahin', 'Istanbul', 4500, 'Toyota');  
INSERT INTO personel VALUES(345678901, 'Mehmet Ozturk', 'Ankara', 3500, 'Honda');  
INSERT INTO personel VALUES(456789012, 'Mehmet Ozturk', 'Izmir', 6000, 'Ford');  
INSERT INTO personel VALUES(567890123, 'Mehmet Ozturk', 'Ankara', 7000, 'Tofas');  
INSERT INTO personel VALUES(456715012, 'Veli Sahin', 'Ankara', 4500, 'Ford');  
INSERT INTO personel VALUES(123456710, 'Hatice Sahin', 'Bursa', 4500, 'Honda');
SELECT * FROM PERSONEL
-- 1) ADD default deger ile tabloya bir field ekleme
ALTER TABLE personel--personel tabloyu guncelle
ADD ulke varchar(30)
ALTER TABLE personel
ADD zipcode varchar(30)
ALTER TABLE personel
ADD adres varchar(50) DEFAULT 'Turkiye' 
-- 2) DROP tablodan sutun silme
ALTER TABLE personel
DROP COLUMN zipcode
ALTER TABLE personel
DROP adres, drop sirket -- Iki sutunu birden sildik
-- 3) RENAME COLUMN sutun adi degistirme
ALTER TABLE personel
RENAME COLUMN sehir TO il;
-- 4) RENAME tablonun ismini degistirme
ALTER TABLE personel
RENAME TO isci
-- 5) TYPE/SET sutunlarin ozelliklerini degistirme
ALTER TABLE isci
ALTER COLUMN il TYPE varchar(30),
ALTER COLUMN maas SET NOT NULL;
/*
Eger numeric data tipine sahip bir sutunun data turune string bir data turu atamak istersek
TYPE varchar(30) USING(maas::varchar(30)) bu formati kullaniriz
*/


ALTER COLUMN maas
TYPE varchar(30) USING(maas::varchar(30))-- ctrl tuusna basarak alter table isci ve yandaki iki komut 
--ayni anda bas


-- TRANSACTION 
CREATE TABLE ogrenciler2
(
id serial,
isim VARCHAR(50),
veli_isim VARCHAR(50),
yazili_notu real       
);
BEGIN;
INSERT INTO ogrenciler2 VALUES(default, 'Ali Can', 'Hasan',75.5);
INSERT INTO ogrenciler2 VALUES(default, 'Merve Gul', 'Ayse',85.3);
savepoint x;
INSERT INTO ogrenciler2 VALUES(default, 'Kemal Yasa', 'Hasan',85.6);
INSERT INTO ogrenciler2 VALUES(default, 'Nesibe Yilmaz', 'Ayse',95.3);
savepoint y;
INSERT INTO ogrenciler2 VALUES(default, 'Mustafa Bak', 'Can',99);
INSERT INTO ogrenciler2 VALUES(default, 'Can Bak', 'Ali', 67.5);
ROLLBACK to y;
COMMIT;

/*
	Transaction kullaniminda SERIAL data turu kullanimi tercih edilmez. Save pointten sonra ekledigimiz
	veride sayac mantigi ile calistigi icin sayacta en son hangi sayida kaldiysa ordan devam eder.
	NOT :PostgreSQL de Transaction kullanımı için «Begin;» komutuyla başlarız sonrasında tekrar
	yanlış bir veriyi düzelmek veya bizim için önemli olan verilerden
	sonra ekleme yapabilmek için "SAVEPOINT savepointismi" komutunu
	kullanırız ve bu savepointe dönebilmek için "ROLLBACK TO savepointismi" komutunu
	kullanırız ve rollback çalıştırıldığında savepoint yazdığımız satırın üstündeki
	verileri tabloda bize verir ve son olarak Transaction'ı sonlandırmak için mutlaka
	"COMMIT" komutu kullanılır.
 */






















